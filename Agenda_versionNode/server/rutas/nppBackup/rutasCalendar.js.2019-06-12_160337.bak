
const Rutas = require('express').Router(),
	  Evento = require('../modelo/modeloCalendar')	


Rutas.get('/', function(req, res){
	res.send('dentro de rutas!!');
	
})

Rutas.get('/all', function(req, res){
	if(req.session.usuario)	
	{
		Evento.find().exec(function(err, doc){
			if(err) {
				resp.status(500);
				res.json(err);
			}
			//console.log('Listando todos los eventos: '+doc)
			res.json(doc);	
		})
	}
	else{
		console.log('Hacer inicio de sesion primero!!!!')
		res.send('sesionNoActivada') 
	}
})

Rutas.post('/new', function(req, res){
	//console.log('/new, datos recibido de formulario: '+JSON.stringify(req.body));
	if(req.session.usuario)	
	{	
		const eventos = new Evento(req.body)
		console.log('schema a insertar a DB: '+eventos);
		eventos.save(function(err){
			if(err){
				console.log(err)
				res.json(err)
			}
		})
	}
	else{ 
		console.log('Hacer inicio de sesion primero!!!!')
		res.send('sesionNoActivada') 
				
	}
})

Rutas.post('/update', function(req, res){
	
	console.log('update a insertar a DB: '+JSON.stringify(req.body));	
	if(req.session.usuario)	
	{	
		const eventos = new Evento(req.body)	
		console.log('schema a insertar a DB por el Id: '+req.body.id);	
		eventos.updateOne({_id: req.body.id},{start: eventos.start, end: eventos.end}, function(err){
              if (err) {
                return res.status(500).send({message: 'Error al intentar actualizar el evento. (status:500)'})
              }else{
                res.send('El evento ha sido actualizado correctamente')      
              }			
		})
	}
	else{
		console.log('Hacer inicio de sesion primero!!!!')
		res.send('sesionNoActivada') 
	}	
})

Rutas.post('/delete/:_id', function(req, res){
	var id = req.params._id
	console.log('id elemento a eliminar: '+id)
	Evento.remove({_id: id}, function(err){
		if(err){
			console.log(err)
			res.status(500)
			res.json(err)
		}
		res.send("evento ha sido eliminado!!!")
	})
	
})

module.exports = Rutas